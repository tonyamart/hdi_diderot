---
title: "03_analysis"
format: html
editor: visual
---

## General Impostors analysis

Some data preparation & cleaning

```{r, warning=FALSE, message=FALSE, include=FALSE, echo=FALSE}
library(tidyverse)
library(tidytext)
library(stylo)
library(seetrees)
library(tinytex)

theme_set(theme_minimal())
library(MetBrewer)
```

### load test fragments

```{r, include=FALSE, echo=FALSE}
# editions data

l <- list.files(path = "../../data/test_fragments/",
                pattern = "^ed",
                full.names = T)

ed <- tibble(
  path = l,
  author = str_remove_all(l, "\\.\\./\\.\\./data/test_fragments//|\\.txt"),
  title = "",
  text = sapply(path, read_file)
) %>% 
  mutate(text = str_replace_all(text, "'", " ")) %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  filter(!str_detect(word, "^\\d+$")) %>% 
  filter(!word %in% c("changed", "appeared", "unchanged"))

head(ed)


# pencil / ink data

l <- list.files(path = "../../data/test_fragments/",
                pattern = "^ink|^pencil",
                full.names = T
                )

ink_pencil <- tibble(
  path = l,
  author = str_remove_all(l, "\\.\\./\\.\\./data/test_fragments//|\\.txt"),
  title = "",
  text = sapply(path, read_file)
) %>% 
  mutate(text = str_replace_all(text, "'", " ")) %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  filter(!str_detect(word, "^\\d+$")) %>% 
  filter(!word %in% c("changed", "appeared", "unchanged"))

# likely Diderot's book chunks from FV recombination
l <- list.files(path = "../../data/test_fragments/",
                pattern = "^fr",
                full.names = T
                )

diderot <- tibble(
  path = l,
  author = str_remove_all(l, "\\.\\./\\.\\./data/test_fragments//|\\.txt"),
  title = "",
  text = sapply(path, read_file)
) %>% 
  mutate(text = str_replace_all(text, "'", " ")) %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  filter(!str_detect(word, "^\\d+$")) %>% 
  filter(!word %in% c("changed", "appeared", "unchanged"))

head(diderot)
```

Number of words in each test fragment

```{r, include=T, echo=F}
print("Number of words in different editions chunks:")
ed %>% 
  count(author, sort = T)

print("Number of words in different Pensées detachées / Mélanges (pencil/ink) chunks:")
ink_pencil %>% 
  count(author, sort = T)

print("Number of words in recombined likely-Diderots FV chunks:")
diderot %>% 
  count(author, sort = T)
```

### load corpus

Test corpus is the same as before in Julian's latest tests.

```{r, include=FALSE, echo=FALSE}
corpus <- readRDS("../../data/corpus_tokenized.rds")

unique(corpus$author)

corpus_tokenized <- corpus %>% 
  # combine two Diderot's samples to one
  mutate(author = ifelse(author == "Diderot II", "Diderot", author)) %>% 
  
  # FILTER authors
  filter(!author %in% c("Marmontel", "Meister", "Naigeon"))

glimpse(corpus_tokenized)

# total number of tokens by each author, two samples from Diderot
corpus_tokenized %>% 
  count(author, sort = T) 

rm(corpus)
```

### fn

Working functions

#### sample ind opt

```{r, include=FALSE, echo=FALSE}
sample_independent_opt <- function(tokenized_df,
  n_samples,
  sample_size,
  text_var = "word",
  folder = "corpus_sampled/", overwrite=T) {


  # create a folder
  dir.create(folder)
  
  # rewrite all files in the folder if the folder existed before
  if(overwrite) {
    do.call(file.remove, list(list.files(folder, full.names = TRUE)))
  }
  
  shuff <- tokenized_df %>%
    group_by(author) %>%
    sample_n(n_samples * sample_size) %>% # sample tokens
    # to each sampled token assign randomly a sample number
    mutate(sample_x = sample( # sample = reshuffle the numbers of samples repeated below
    rep( # repeat
      1:n_samples, # the numbers of samples (1, 2, 3...)
      each = sample_size # each is sample_size times repeated
      ))) %>%
    # create a column author_sampleX
    unite(sample_id, c(author, sample_x), remove = F) %>%
    # group and paste together by sample_id (some kind of special paste with !!sym() )
    group_by(sample_id) %>%
    summarise(text = paste(!!sym(text_var), collapse = " "))
    
    # write samples
    for(i in 1:nrow(shuff)) {
    write_file(file=paste0(folder, shuff$sample_id[i],".txt"), shuff$text[i])
  }
}
```

#### diy stylo for imposters

```{r, include=FALSE, echo=FALSE}
diy_stylo <- function(folder = "corpus_sampled/",
                      mfw = 200,
                      drop_words = T,
                      feature = "word",
                      n_gram = 1) {
  
  # read the sampled texts from the folder corpus_sampled/
  # the feature is either word or charaters
  # the tokenizer returns lists of tokens for each text from the folder
  tokenized.texts = load.corpus.and.parse(
    files = list.files(folder, full.names = T),
    features = feature,
    ngram.size = n_gram
  )
  # computing a list of most frequent words (trimmed to top 2000 items):
  features = make.frequency.list(tokenized.texts, head = 2000)
  # producing a table of relative frequencies:
  data = make.table.of.frequencies(tokenized.texts, features, relative = TRUE)#[,1:mfw]
  
  
  
  # --- cleaning ---
  # remove stop words
  str_dev_words <- c("changed")
  s_words <- str_detect(colnames(data), str_dev_words) # output is a logical vector with the positions of the 
  if(drop_words) {
    data <- data[,!s_words]
  }
  # crop mfw
  data <- data[, 1:mfw]
  # clean document names
  
  rownames(data) <- str_remove_all(rownames(data), "corpus_sampled/") # Clean Rownammes
  rownames(data) <- str_remove_all(rownames(data), "^.*?//") # clean rownames from full paths
  
  
  # output
  return(data)
}
```

## PART I. Editions of 1770, 1774 & 1780

Bind corpus & test fragments together.

**DATA**

The fragments were selected as follows:

-   using the metadata compiled by Julian, there are three tags for each fragment

    -   1770 edition: appeared / not appeared

    -   1774 edition: appeared / not appeared / changed / not changed

    -   1780 edition: appeared / changed / not changed

-   consequently, all the fragments were divided into 7 groups:

    -   appeared 1770 - not changed 1774 - not changed 1780

    -   appeared 1770 - changed 1774 - not changed 1780

    -   appeared 1770 - not changed 1774 - changed 1780

    -   appeared 1770 - changed 1774 - changed 1780

    -   appeared 1774 - not changed 1780

    -   appeared 1774 - changed 1780

    -   appeared 1780

-   based on these criteria, the fragments were combined into one text file which is used for the analysis below as a test text.

### imposters

```{r, echo=FALSE}
ed_corpus <- rbind(corpus_tokenized, ed)
```

#### 1770 unchanged

```{r, echo=FALSE}
# var needed for diy fn
str_dev_words <- c("changed")
```

```{r, message=FALSE, warning=FALSE, eval=FALSE, include=FALSE, echo=FALSE}
sample_independent_opt(tokenized_df = ed_corpus %>% 
                         filter(!author %in% c("ed1770_CH1774_CH1780", 
                                               "ed1770_CH1774_nch1780", 
                                               "ed1770_nch1774_CH1780", 
                                               #"ed1770_nch1774_nch1780", 
                                               "ed1774_CH1780", 
                                               "ed1774_nch1780", 
                                               "ed1780"
                                               )),
  n_samples = 2,
  sample_size = 4000)

dtm <- diy_stylo(
  folder = "corpus_sampled/",
  mfw = 200,
  drop_words = F)

grep("ed", rownames(dtm))
```

```{r, warning=FALSE, message=FALSE, eval=FALSE, include=FALSE, echo=FALSE}
imp_res <- vector(mode = "list")

counter <- 0

for (i in 1:50) {
  
  # create samples for each trial
  sample_independent_opt(
    tokenized_df = ed_corpus %>% 
                         filter(!author %in% c("ed1770_CH1774_CH1780", 
                                               "ed1770_CH1774_nch1780", 
                                               "ed1770_nch1774_CH1780", 
                                               #"ed1770_nch1774_nch1780", 
                                               "ed1774_CH1780", 
                                               "ed1774_nch1780", 
                                               "ed1780"
                                               )), 
    n_samples = 2, 
    sample_size = 4000)
  
  # build doc-term matrix from the samples in the corpus_sampled folder
  data = diy_stylo(mfw = 200, 
                    feature = "word",
                    n_gram = 1)
  
  # test each of the true FV-L1 sets
  for (s in c(13, 14)) {
    
    # run imposters test
    r <- imposters(reference.set = data[-c(13, 14),], # remove test data from the ref
                   test = data[c(s),], # test one of the samples against the others
                   features = 0.5, # test 50% of the features in each trial
                   iterations = 100,
                   distance = "wurzburg"
                   )
    
    # count iterations
    counter <- counter + 1
    
    # store results
    
    imp_res[[counter]] <- tibble(candidate = names(r),
                                 proportion = r)
    
    print(counter)
  }
  
}

saveRDS(imp_res, "imp_res/impr_1770_nch74_nch80.rds")
```

```{r, echo=FALSE}
imp_res <- readRDS("imp_res/impr_1770_nch74_nch80.rds")

imp_res %>%
  bind_rows() %>%  #stack all the optained prop tables into one 
  mutate(candidate = str_remove(candidate, "^/")) %>% 
  ggplot(aes(x = reorder(candidate, - proportion),
  y = proportion)) +
  geom_boxplot(fill = "darkcyan", alpha = 0.6) +
  theme_bw() + 
  labs(subtitle = "Proportion of cases where a sample from an author was the closest one\nto FV text from 1770 that stayed unchanged in later editions (1774 & 1780)", x = "Candidates", y = "Proportion") +
  theme(axis.text.x = element_text(angle = 25))
```

```{r}
# short plot for the article
imp_res %>%
  bind_rows() %>%  #stack all the optained prop tables into one 
  mutate(candidate = str_remove(candidate, "^/")) %>% 
  filter(candidate %in% c("Diderot", "Rivière", "Condorcet", "dHolbach", "Saint-Lambert", "Meister", "Deleyre", "Pechmeja", "Baudeau")) %>% 
  mutate(gr = ifelse(candidate == "Diderot", "d", "no")) %>% 
  ggplot(aes(x = reorder(candidate, proportion),
  y = proportion)) + 
  geom_boxplot(aes(fill = gr)) + 
  #geom_boxplot(fill = "darkcyan", alpha = 0.6) +
  theme_bw() + 
  coord_flip() + 
  scale_fill_manual(values = met.brewer("Kandinsky")[2:4]) + 
  labs(subtitle = "Proportion of cases where a sample from an author was the closest one\nto FV text from 1770 that stayed unchanged in later editions (1774 & 1780)", x = "Candidates (top 7 + Diderot)", y = "Proportion") +
  theme(#axis.text.x = element_text(angle = 25)
        axis.text = element_text(size = 12),
        legend.position = "None"
        )

#ggsave("../../hdi_diderot/scr/plots_paper/fig_2-a.png",
#       plot = last_plot(), dpi = 300, bg = "white",
#       height = 5, width = 8)
```

This is the strongest d'Holbach authorship signal obtained from this data, the algorithm is quite sure about his authorship for the FV fragments of the earliest fragments (appeared ed. 1770 and remained unchanged in later editions).

#### 1770-ch 1774-nch 1780

```{r, eval=FALSE, include=FALSE, echo=FALSE}
sample_independent_opt(tokenized_df = ed_corpus %>% 
                         filter(!author %in% c("ed1770_CH1774_CH1780", 
                                               # "ed1770_CH1774_nch1780", 
                                               "ed1770_nch1774_CH1780", 
                                               "ed1770_nch1774_nch1780", 
                                               "ed1774_CH1780", 
                                               "ed1774_nch1780", 
                                               "ed1780"
                                               )),
  n_samples = 2,
  sample_size = 2500)

dtm <- diy_stylo(
  folder = "corpus_sampled/",
  mfw = 200,
  drop_words = F)

grep("ed", rownames(dtm))

rownames(dtm)
```

```{r, warning=FALSE, message=FALSE, eval=FALSE, include=FALSE, echo=FALSE}
imp_res <- vector(mode = "list")

counter <- 0

for (i in 1:50) {
  
  # create samples for each trial
  sample_independent_opt(
    tokenized_df = ed_corpus %>% 
                         filter(!author %in% c("ed1770_CH1774_CH1780", 
                                               # "ed1770_CH1774_nch1780", 
                                               "ed1770_nch1774_CH1780", 
                                               "ed1770_nch1774_nch1780", 
                                               "ed1774_CH1780", 
                                               "ed1774_nch1780", 
                                               "ed1780"
                                               )), 
    n_samples = 2, 
    sample_size = 2500)
  
  # build doc-term matrix from the samples in the corpus_sampled folder
  data = diy_stylo(mfw = 200, 
                    feature = "word",
                    n_gram = 1)
  
  # test each of the true FV-L1 sets
  for (s in c(13, 14)) {
    
    # run imposters test
    r <- imposters(reference.set = data[-c(13, 14),], # remove test data from the ref
                   test = data[c(s),], # test one of the samples against the others
                   features = 0.5, # test 50% of the features in each trial
                   iterations = 100,
                   distance = "wurzburg"
                   )
    
    # count iterations
    counter <- counter + 1
    
    # store results
    
    imp_res[[counter]] <- tibble(candidate = names(r),
                                 proportion = r)
    
    print(counter)
  }
  
}

saveRDS(imp_res, "imp_res/impr_1770_ch74_nch80.rds")
```

```{r, echo=FALSE}
imp_res <- readRDS("imp_res/impr_1770_ch74_nch80.rds")

imp_res %>%
  bind_rows() %>%  #stack all the optained prop tables into one
  mutate(candidate = str_remove(candidate, "^/")) %>% 
  ggplot(aes(x = reorder(candidate, - proportion),
  y = proportion)) +
  geom_boxplot(fill = "darkcyan", alpha = 0.6) +
  theme_bw() + 
  labs(subtitle = "Proportion of cases where a sample from an author was the closest one\nto FV text from 1770 that was changed in the ed. of 1774 and not changed in the ed. of 1780 ", x = "") +
  theme(axis.text.x = element_text(angle = 25))
```

#### 1770-ch1774-ch1780

```{r, eval=FALSE, include=FALSE, echo=FALSE}
sample_independent_opt(tokenized_df = ed_corpus %>% 
                         filter(!author %in% c(#"ed1770_CH1774_CH1780", 
                                               "ed1770_CH1774_nch1780", 
                                               "ed1770_nch1774_CH1780", 
                                               "ed1770_nch1774_nch1780", 
                                               "ed1774_CH1780", 
                                               "ed1774_nch1780", 
                                               "ed1780"
                                               )),
  n_samples = 2,
  sample_size = 5000)

dtm <- diy_stylo(
  folder = "corpus_sampled/",
  mfw = 200,
  drop_words = F)

dim(dtm)

grep("ed", rownames(dtm))
```

```{r, warning=FALSE, message=FALSE, eval=FALSE, include=FALSE, echo=FALSE}
imp_res <- vector(mode = "list")
counter <- 0
r <- NULL

for (i in 1:50) {
  
  # create samples for each trial
  sample_independent_opt(
    tokenized_df = ed_corpus %>% 
                         filter(!author %in% c(#"ed1770_CH1774_CH1780", 
                                               "ed1770_CH1774_nch1780", 
                                               "ed1770_nch1774_CH1780", 
                                               "ed1770_nch1774_nch1780", 
                                               "ed1774_CH1780", 
                                               "ed1774_nch1780", 
                                               "ed1780"
                                               )), 
    n_samples = 2, 
    sample_size = 4000)
  
  # build doc-term matrix from the samples in the corpus_sampled folder
  data = diy_stylo(mfw = 200, 
                    feature = "word",
                    n_gram = 1)
  
  # test each of the true FV-L1 sets
  for (s in c(13, 14)) {
    
    # run imposters test
    r <- imposters(reference.set = data[-c(13, 14),], # remove test data from the ref
                   test = data[c(s),], # test one of the samples against the others
                   features = 0.5, # test 50% of the features in each trial
                   iterations = 100,
                   distance = "wurzburg"
                   )
    
    # count iterations
    counter <- counter + 1
    
    # store results
    
    imp_res[[counter]] <- tibble(candidate = names(r),
                                 proportion = r)
    
    print(counter)
  }
  
}

saveRDS(imp_res, "imp_res/impr_1770_ch74_ch80.rds")
```

```{r, echo=FALSE}
imp_res <- readRDS("imp_res/impr_1770_ch74_ch80.rds")

imp_res %>%
  bind_rows() %>%  #stack all the optained prop tables into one
  mutate(candidate = str_remove(candidate, "^/")) %>% 
  ggplot(aes(x = reorder(candidate, - proportion),
  y = proportion)) +
  geom_boxplot(fill = "darkcyan", alpha = 0.6) +
  theme_bw() + 
  labs(subtitle = "Proportion of cases where a sample from an author was the closest one\nto FV text from 1770 that was changed twice in the ed. of 1774 and that of 1780 ", x = "") +
  theme(axis.text.x = element_text(angle = 25))
```

#### 1770-nch1774-ch1780

n words = 18 247

```{r, warning=FALSE, message=FALSE, eval=FALSE, include=FALSE, echo=FALSE}

sample_independent_opt(tokenized_df = ed_corpus %>% 
                         filter(!author %in% c("ed1770_CH1774_CH1780", 
                                               "ed1770_CH1774_nch1780", 
                                               #"ed1770_nch1774_CH1780", 
                                               "ed1770_nch1774_nch1780", 
                                               "ed1774_CH1780", 
                                               "ed1774_nch1780", 
                                               "ed1780"
                                               )),
  n_samples = 2,
  sample_size = 5000)

dtm <- diy_stylo(
  folder = "corpus_sampled/",
  mfw = 200,
  drop_words = F)

# dim(dtm)

grep("ed", rownames(dtm))

imp_res <- vector(mode = "list")
r <- NULL
counter <- 0

for (i in 1:50) {
  
  # create samples for each trial
  sample_independent_opt(
    tokenized_df = ed_corpus %>% 
                         filter(!author %in% c("ed1770_CH1774_CH1780", 
                                               "ed1770_CH1774_nch1780", 
                                               #"ed1770_nch1774_CH1780", 
                                               "ed1770_nch1774_nch1780", 
                                               "ed1774_CH1780", 
                                               "ed1774_nch1780", 
                                               "ed1780"
                                               )), 
    n_samples = 2, 
    sample_size = 5000)
  
  # build doc-term matrix from the samples in the corpus_sampled folder
  data = diy_stylo(mfw = 200, 
                    feature = "word",
                    n_gram = 1)
  
  # test each of the true FV-L1 sets
  for (s in c(13, 14)) {
    
    # run imposters test
    r <- imposters(reference.set = data[-c(13, 14),], # remove test data from the ref
                   test = data[c(s),], # test one of the samples against the others
                   features = 0.5, # test 50% of the features in each trial
                   iterations = 100,
                   distance = "wurzburg"
                   )
    
    # count iterations
    counter <- counter + 1
    
    # store results
    
    imp_res[[counter]] <- tibble(candidate = names(r),
                                 proportion = r)
    
    print(counter)
  }
  
}

saveRDS(imp_res, "imp_res/impr_1770_nch74_ch80.rds")
```

```{r, echo=FALSE}
imp_res <- readRDS("imp_res/impr_1770_nch74_ch80.rds")

imp_res %>%
  bind_rows() %>%  #stack all the optained prop tables into one
  mutate(candidate = str_remove(candidate, "^/")) %>% 
  ggplot(aes(x = reorder(candidate, - proportion),
  y = proportion)) +
  geom_boxplot(fill = "darkcyan", alpha = 0.6) +
  theme_bw() + 
  labs(subtitle = "Proportion of cases where a sample from an author was the closest one\nto FV text from 1770 that was not changed in the ed. of 1774 and changed in the ed. of 1780", x = "") +
  theme(axis.text.x = element_text(angle = 25))
```

#### 1774-nch1780

n words = 4 821

```{r, warning=FALSE, message=FALSE, eval=FALSE, include=FALSE, echo=FALSE}

sample_independent_opt(tokenized_df = ed_corpus %>% 
                         filter(!author %in% c("ed1770_CH1774_CH1780", 
                                               "ed1770_CH1774_nch1780", 
                                               "ed1770_nch1774_CH1780", 
                                               "ed1770_nch1774_nch1780", 
                                               "ed1774_CH1780", 
                                               #"ed1774_nch1780", 
                                               "ed1780"
                                               )),
  n_samples = 2,
  sample_size = 2000)

dtm <- diy_stylo(
  folder = "corpus_sampled/",
  mfw = 200,
  drop_words = F)

# dim(dtm)

grep("ed", rownames(dtm))

imp_res <- vector(mode = "list")
r <- NULL
counter <- 0

for (i in 1:50) {
  
  # create samples for each trial
  sample_independent_opt(
    tokenized_df = ed_corpus %>% 
                         filter(!author %in% c("ed1770_CH1774_CH1780", 
                                               "ed1770_CH1774_nch1780", 
                                               "ed1770_nch1774_CH1780", 
                                               "ed1770_nch1774_nch1780", 
                                               "ed1774_CH1780", 
                                               #"ed1774_nch1780", 
                                               "ed1780"
                                               )), 
    n_samples = 2, 
    sample_size = 2000)
  
  # build doc-term matrix from the samples in the corpus_sampled folder
  data = diy_stylo(mfw = 200, 
                    feature = "word",
                    n_gram = 1)
  
  # test each of the true FV-L1 sets
  for (s in c(13, 14)) {
    
    # run imposters test
    r <- imposters(reference.set = data[-c(13, 14),], # remove test data from the ref
                   test = data[c(s),], # test one of the samples against the others
                   features = 0.5, # test 50% of the features in each trial
                   iterations = 100,
                   distance = "wurzburg"
                   )
    
    # count iterations
    counter <- counter + 1
    
    # store results
    
    imp_res[[counter]] <- tibble(candidate = names(r),
                                 proportion = r)
    
    print(counter)
  }
  
}

saveRDS(imp_res, "imp_res/impr_1774_nch80.rds")
```

```{r, echo=FALSE}
imp_res <- readRDS("imp_res/impr_1774_nch80.rds")

imp_res %>%
  bind_rows() %>%  #stack all the optained prop tables into one
  mutate(candidate = str_remove(candidate, "^/")) %>% 
  ggplot(aes(x = reorder(candidate, - proportion),
  y = proportion)) +
  geom_boxplot(fill = "darkcyan", alpha = 0.6) +
  theme_bw() + 
  labs(subtitle = "Proportion of cases where a sample from an author was the closest one\nto FV text from the ed. of 1774 and not changed in the ed. of 1780",
       x = "") +
  theme(axis.text.x = element_text(angle = 25,
                                   size = 12))
```

#### 1774-ch1780

```{r, warning=FALSE, message=FALSE, eval=FALSE, include=FALSE, echo=FALSE}

sample_independent_opt(tokenized_df = ed_corpus %>% 
                         filter(!author %in% c("ed1770_CH1774_CH1780", 
                                               "ed1770_CH1774_nch1780", 
                                               "ed1770_nch1774_CH1780", 
                                               "ed1770_nch1774_nch1780", 
                                               #"ed1774_CH1780", 
                                               "ed1774_nch1780", 
                                               "ed1780"
                                               )),
  n_samples = 2,
  sample_size = 5000)

dtm <- diy_stylo(
  folder = "corpus_sampled/",
  mfw = 200,
  drop_words = F)

# dim(dtm)

grep("ed", rownames(dtm))

imp_res <- vector(mode = "list")
r <- NULL
counter <- 0

for (i in 1:50) {
  
  # create samples for each trial
  sample_independent_opt(
    tokenized_df = ed_corpus %>% 
                         filter(!author %in% c("ed1770_CH1774_CH1780", 
                                               "ed1770_CH1774_nch1780", 
                                               "ed1770_nch1774_CH1780", 
                                               "ed1770_nch1774_nch1780", 
                                               #"ed1774_CH1780", 
                                               "ed1774_nch1780", 
                                               "ed1780"
                                               )), 
    n_samples = 2, 
    sample_size = 5000)
  
  # build doc-term matrix from the samples in the corpus_sampled folder
  data = diy_stylo(mfw = 200, 
                    feature = "word",
                    n_gram = 1)
  
  # test each of the true FV-L1 sets
  for (s in c(13, 14)) {
    
    # run imposters test
    r <- imposters(reference.set = data[-c(13, 14),], # remove test data from the ref
                   test = data[c(s),], # test one of the samples against the others
                   features = 0.5, # test 50% of the features in each trial
                   iterations = 100,
                   distance = "wurzburg"
                   )
    
    # count iterations
    counter <- counter + 1
    
    # store results
    
    imp_res[[counter]] <- tibble(candidate = names(r),
                                 proportion = r)
    
    print(counter)
  }
  
}

saveRDS(imp_res, "imp_res/impr_1774_ch80.rds")
```

```{r, echo=FALSE}
imp_res <- readRDS("imp_res/impr_1774_ch80.rds")

imp_res %>%
  bind_rows() %>%  #stack all the optained prop tables into one
  mutate(candidate = str_remove(candidate, "^/")) %>% 
  ggplot(aes(x = reorder(candidate, - proportion),
  y = proportion)) +
  geom_boxplot(fill = "darkcyan", alpha = 0.6) +
  theme_bw() + 
  labs(subtitle = "Proportion of cases where a sample from an author was the closest one\nto FV text from the ed. of 1774 and changed in the ed. of 1780",
       x = "") +
  theme(axis.text.x = element_text(angle = 25))
```

#### 1780

n words = 86k

```{r, warning=FALSE, message=FALSE, eval=FALSE, include=FALSE, echo=FALSE}

sample_independent_opt(tokenized_df = ed_corpus %>% 
                         filter(!author %in% c("ed1770_CH1774_CH1780", 
                                               "ed1770_CH1774_nch1780", 
                                               "ed1770_nch1774_CH1780", 
                                               "ed1770_nch1774_nch1780", 
                                               "ed1774_CH1780", 
                                               "ed1774_nch1780"#, 
                                               #"ed1780"
                                               )),
  n_samples = 2,
  sample_size = 10000)

dtm <- diy_stylo(
  folder = "corpus_sampled/",
  mfw = 200,
  drop_words = F)

# dim(dtm)

grep("ed", rownames(dtm))

imp_res <- vector(mode = "list")
r <- NULL
counter <- 0

for (i in 1:50) {
  
  # create samples for each trial
  sample_independent_opt(
    tokenized_df = ed_corpus %>% 
                         filter(!author %in% c("ed1770_CH1774_CH1780", 
                                               "ed1770_CH1774_nch1780", 
                                               "ed1770_nch1774_CH1780", 
                                               "ed1770_nch1774_nch1780", 
                                               "ed1774_CH1780", 
                                               "ed1774_nch1780"#, 
                                               #"ed1780"
                                               )), 
    n_samples = 2, 
    sample_size = 10000)
  
  # build doc-term matrix from the samples in the corpus_sampled folder
  data = diy_stylo(mfw = 200, 
                    feature = "word",
                    n_gram = 1)
  
  # test each of the true FV-L1 sets
  for (s in c(13, 14)) {
    
    # run imposters test
    r <- imposters(reference.set = data[-c(13, 14),], # remove test data from the ref
                   test = data[c(s),], # test one of the samples against the others
                   features = 0.5, # test 50% of the features in each trial
                   iterations = 100,
                   distance = "wurzburg"
                   )
    
    # count iterations
    counter <- counter + 1
    
    # store results
    
    imp_res[[counter]] <- tibble(candidate = names(r),
                                 proportion = r)
    
    print(counter)
  }
  
}

saveRDS(imp_res, "imp_res/impr_1780.rds")
```

```{r, echo=FALSE}
imp_res <- readRDS("imp_res/impr_1780.rds")

imp_res %>%
  bind_rows() %>%  #stack all the optained prop tables into one
  mutate(candidate = str_remove(candidate, "^/")) %>% 
  ggplot(aes(x = reorder(candidate, - proportion),
  y = proportion)) +
  geom_boxplot(fill = "darkcyan", alpha = 0.6) +
  theme_bw() + 
  labs(subtitle = "Proportion of cases where a sample from an author was the closest one\nto FV text from the ed. of 1780", x = "") +
  theme(axis.text.x = element_text(angle = 25))
```

### Current conclusions

The Diderot's authorship of these fragments is unlikely for all groups of fragments at the moment.

D'Holbach's signal is stronger in case of the earliest editions (1770 & not changed later), it weakens towards the 1780s edition.

## PART II. Pensées détachées vs Mélanges

Or "pencil vs ink".

The data is gathered using respective two columns from the metadata. All fragments marked as included to Pensées détachées or Mélanges are brought together in one file. These files are used for sampling and tests. An important difference from all other tests in this case is that both test samples here are quite large, i.e., the results might be more robust.

```{r, include=FALSE, echo=FALSE}
# select test texts from the corpus
pencil_ink_corpus <- rbind(ink_pencil, corpus_tokenized)

# unique(pencil_ink_corpus$author)
# 
# pencil_ink_corpus %>% 
#   filter(author %in% c("ink_melanges", "pencil_pensees_detachees")) %>% 
#   count(author)
```

### Imposters

#### Pensées détachées (pencil)

```{r, warning=FALSE, message=FALSE, eval=FALSE, include=FALSE, echo=FALSE}

sample_independent_opt(tokenized_df = pencil_ink_corpus %>% 
                         filter(!author %in% c("ink_melanges"#, 
                                               #"ink_melanges_not-in-pencil"#,
                                              #"pencil_pensees_detachees"
                                               )),
                       n_samples = 2,
                       sample_size = 5000)

dtm <- diy_stylo(
  folder = "corpus_sampled/",
  mfw = 200,
  drop_words = F)

# dim(dtm)

grep("pencil", rownames(dtm))

imp_res <- vector(mode = "list")
r <- NULL
counter <- 0

for (i in 1:50) {
  
  # create samples for each trial
  sample_independent_opt(
    tokenized_df = pencil_ink_corpus %>% 
                         filter(!author %in% c("ink_melanges"#,
                                               #"ink_melanges_not-in-pencil"#, "pencil_pensees_detachees"
                                               )), 
    n_samples = 2, 
    sample_size = 5000)
  
  # build doc-term matrix from the samples in the corpus_sampled folder
  data = diy_stylo(mfw = 200, 
                    feature = "word",
                    n_gram = 1)
  
  # test each of the true FV-L1 sets
  for (s in c(25, 26)) {
    
    # run imposters test
    r <- imposters(reference.set = data[-c(25, 26),], # remove test data from the ref
                   test = data[c(s),], # test one of the samples against the others
                   features = 0.5, # test 50% of the features in each trial
                   iterations = 100,
                   distance = "wurzburg"
                   )
    
    # count iterations
    counter <- counter + 1
    
    # store results
    
    imp_res[[counter]] <- tibble(candidate = names(r),
                                 proportion = r)
    
    print(counter)
  }
  
}

saveRDS(imp_res, "imp_res/impr_pencil.rds")
```

```{r, echo=FALSE}
imp_res <- readRDS("imp_res/impr_pencil.rds")

imp_res %>%
  bind_rows() %>%  #stack all the optained prop tables into one
  mutate(candidate = str_remove(candidate, "^/")) %>% 
  ggplot(aes(x = reorder(candidate, - proportion),
  y = proportion)) +
  geom_boxplot(fill = "darkcyan", alpha = 0.6) +
  theme_bw() + 
  labs(subtitle = "Proportion of cases where a sample from an author was the closest one\nto FV texts from Pensées détachées", x = "") +
  theme(axis.text.x = element_text(angle = 25))
```

#### Mélanges (ink)

```{r, warning=FALSE, message=FALSE, eval=FALSE, include=FALSE, echo=FALSE}

sample_independent_opt(tokenized_df = pencil_ink_corpus %>% 
                         filter(!author %in% c(#"ink_melanges",
                           #"ink_melanges_not-in-pencil",
                                               "pencil_pensees_detachees"
                                               )),
                       n_samples = 2,
                       sample_size = 5000)

dtm <- diy_stylo(
  folder = "corpus_sampled/",
  mfw = 200,
  drop_words = F)

#dim(dtm)

grep("ink", rownames(dtm))

imp_res <- vector(mode = "list")
r <- NULL
counter <- 0

for (i in 1:50) {
  
  # create samples for each trial
  sample_independent_opt(
    tokenized_df = pencil_ink_corpus %>% 
                         filter(!author %in% c(# "ink_melanges"
                           #"ink_melanges_not-in-pencil",  
                           "pencil_pensees_detachees"
                                               )), 
    n_samples = 2, 
    sample_size = 5000)
  
  # build doc-term matrix from the samples in the corpus_sampled folder
  data = diy_stylo(mfw = 200, 
                    feature = "word",
                    n_gram = 1)
  
  # test each of the true FV-L1 sets
  for (s in c(15, 16)) {
    
    # run imposters test
    r <- imposters(reference.set = data[-c(15, 16),], # remove test data from the ref
                   test = data[c(s),], # test one of the samples against the others
                   features = 0.5, # test 50% of the features in each trial
                   iterations = 100,
                   distance = "wurzburg"
                   )
    
    # count iterations
    counter <- counter + 1
    
    # store results
    
    imp_res[[counter]] <- tibble(candidate = names(r),
                                 proportion = r)
    
    print(counter)
  }
  
}

saveRDS(imp_res, "imp_res/impr_ink.rds")
```

```{r, echo=FALSE}
imp_res <- readRDS("imp_res/impr_ink.rds")

imp_res %>%
  bind_rows() %>%  #stack all the optained prop tables into one
  mutate(candidate = str_remove(candidate, "^/")) %>% 
  ggplot(aes(x = reorder(candidate, - proportion),
  y = proportion)) +
  geom_boxplot(fill = "darkcyan", alpha = 0.6) +
  theme_bw() + 
  labs(subtitle = "Proportion of cases where a sample from an author was the closest one\nto FV texts from Mélanges (ink)", x = "") +
  theme(axis.text.x = element_text(angle = 25))



imp_res %>%
  bind_rows() %>%  #stack all the optained prop tables into one 
  mutate(candidate = str_remove(candidate, "^/")) %>% 
  filter(candidate %in% c("Diderot", "Rivière", "Condorcet", "dHolbach", "Saint-Lambert", "Meister", "Deleyre", "Pechmeja", "Baudeau")) %>% 
  mutate(gr = ifelse(candidate == "Diderot", "d", "no")) %>% 
  ggplot(aes(x = reorder(candidate, proportion),
  y = proportion)) + 
  geom_boxplot(aes(fill = gr)) + 
  #geom_boxplot(fill = "darkcyan", alpha = 0.6) +
  theme_bw() + 
  coord_flip() + 
  scale_fill_manual(values = met.brewer("Kandinsky")[2:4]) + 
  labs(subtitle = "Proportion of cases where a sample from an author was the closest one\nto FV texts from Mélanges (ink)", x = "Candidates (selected)", y = "Proportion") +
  theme(#axis.text.x = element_text(angle = 25)
        axis.text = element_text(size = 12),
        legend.position = "None"
        )

ggsave("../../hdi_diderot/scr/plots_paper/fig_3-a.png",
      plot = last_plot(), dpi = 300, bg = "white",
      height = 5, width = 8)
```

### Current conclusions

It is unlikely that any of the selections (either in pencil or in ink) are Diderot's texts.

## PART III. 'Likely Diderot' fragments check

Selected fragments:

-   fr_on_russia-china

-   fr_sauvage

-   fr_51-55-72-40

```{r}

# select test texts from the corpus
diderot_corpus <- rbind(diderot, corpus_tokenized)

unique(diderot_corpus$author)

# number of words in each selection
diderot_corpus %>% 
  filter(author %in% c("fr_51-55-72-40", 
                       "fr_on_russia-china", 
                       "fr_sauvage")) %>% 
  count(author)
```

### Imposters

#### Russia-China

```{r, warning=FALSE, message=FALSE, eval=FALSE, include=FALSE, echo=FALSE}

sample_independent_opt(tokenized_df = diderot_corpus %>% 
                         filter(!author %in% c("fr_51-55-72-40", 
                                               #"fr_on_russia-china", 
                                               "fr_sauvage")),
                       n_samples = 2,
                       sample_size = 2200)

dtm <- diy_stylo(
  folder = "corpus_sampled/",
  mfw = 200,
  drop_words = F)

# dim(dtm)

grep("fr_", rownames(dtm))

imp_res <- vector(mode = "list")
r <- NULL
counter <- 0

for (i in 1:50) {
  
  # create samples for each trial
  sample_independent_opt(
    tokenized_df = diderot_corpus %>% 
                         filter(!author %in% c("fr_51-55-72-40", 
                                               #"fr_on_russia-china", 
                                               "fr_sauvage")), 
    n_samples = 2, 
    sample_size = 2200)
  
  # build doc-term matrix from the samples in the corpus_sampled folder
  data = diy_stylo(mfw = 200, 
                    feature = "word",
                    n_gram = 1)
  
  # test each of the true FV-L1 sets
  for (s in c(13, 14)) {
    
    # run imposters test
    r <- imposters(reference.set = data[-c(13, 14),], # remove test data from the ref
                   test = data[c(s),], # test one of the samples against the others
                   features = 0.5, # test 50% of the features in each trial
                   iterations = 100,
                   distance = "wurzburg"
                   )
    
    # count iterations
    counter <- counter + 1
    
    # store results
    
    imp_res[[counter]] <- tibble(candidate = names(r),
                                 proportion = r)
    
    print(counter)
  }
  
}

saveRDS(imp_res, "imp_res/impr_rus-china.rds")
```

```{r, echo=FALSE}
imp_res <- readRDS("imp_res/impr_rus-china.rds")

imp_res %>%
  bind_rows() %>%  #stack all the optained prop tables into one
  mutate(candidate = str_remove(candidate, "^/")) %>% 
  ggplot(aes(x = reorder(candidate, - proportion),
  y = proportion)) +
  geom_boxplot(fill = "darkcyan", alpha = 0.6) +
  theme_bw() + 
  labs(subtitle = "Proportion of cases where a sample from an author was the closest one\nto fragments on China & Russia (12, 68, 310)", x = "") +
  theme(axis.text.x = element_text(angle = 25))
```

#### Sauvage

```{r, warning=FALSE, message=FALSE, eval=FALSE, include=FALSE, echo=FALSE}

sample_independent_opt(tokenized_df = diderot_corpus %>% 
                         filter(!author %in% c("fr_51-55-72-40", 
                                               "fr_on_russia-china"#, 
                                               #"fr_sauvage"
                                               )),
                       n_samples = 2,
                       sample_size = 4500)

dtm <- diy_stylo(
  folder = "corpus_sampled/",
  mfw = 200,
  drop_words = F)

#dim(dtm)

grep("fr_", rownames(dtm))

imp_res <- vector(mode = "list")

counter <- 0

for (i in 1:50) {
  
  # create samples for each trial
  sample_independent_opt(
    tokenized_df = diderot_corpus %>% 
                         filter(!author %in% c("fr_51-55-72-40", 
                                               "fr_on_russia-china"#, 
                                               #"fr_sauvage"
                                               )), 
    n_samples = 2, 
    sample_size = 4500)
  
  # build doc-term matrix from the samples in the corpus_sampled folder
  data = diy_stylo(mfw = 200, 
                    feature = "word",
                    n_gram = 1)
  
  # test each of the true FV-L1 sets
  for (s in c(13, 14)) {
    
    # run imposters test
    r <- imposters(reference.set = data[-c(13, 14),], # remove test data from the ref
                   test = data[c(s),], # test one of the samples against the others
                   features = 0.5, # test 50% of the features in each trial
                   iterations = 100,
                   distance = "wurzburg"
                   )
    
    # count iterations
    counter <- counter + 1
    
    # store results
    
    imp_res[[counter]] <- tibble(candidate = names(r),
                                 proportion = r)
    
    print(counter)
  }
  
}

saveRDS(imp_res, "imp_res/impr_sauvage.rds")
```

```{r, echo=FALSE}
imp_res <- readRDS("imp_res/impr_sauvage.rds")

imp_res %>%
  bind_rows() %>%  #stack all the optained prop tables into one
  mutate(candidate = str_remove(candidate, "^/")) %>% 
  ggplot(aes(x = reorder(candidate, - proportion),
  y = proportion)) +
  geom_boxplot(fill = "darkcyan", alpha = 0.6) +
  theme_bw() + 
  labs(subtitle = "Proportion of cases where a sample from an author was the closest one\nto the fragment 'Les avantages de la vie sauvage'", x = "") +
  theme(axis.text.x = element_text(angle = 25))



imp_res %>%
  bind_rows() %>%  #stack all the optained prop tables into one 
  mutate(candidate = str_remove(candidate, "^/")) %>% 
  filter(candidate %in% c("Diderot", "Pechmeja", "Morellet", "Meister", "Rivière", "Condorcet", "dHolbach", "Saint-Lambert",  "Baudeau")) %>% 
  mutate(gr = ifelse(candidate == "Diderot", "d", "no")) %>% 
  ggplot(aes(x = reorder(candidate, proportion),
  y = proportion)) + 
  geom_boxplot(aes(fill = gr)) + 
  #geom_boxplot(fill = "darkcyan", alpha = 0.6) +
  theme_bw() + 
  coord_flip() + 
  scale_fill_manual(values = met.brewer("Kandinsky")[2:4]) + 
  labs(subtitle = "Proportion of cases where a sample from an author was the closest one\nto the fragment 'Les avantages de la vie sauvage'", x = "Candidates (selected)", y = "Proportion") +
  theme(#axis.text.x = element_text(angle = 25)
        axis.text = element_text(size = 12),
        legend.position = "None"
        )

# ggsave("../../hdi_diderot/scr/plots_paper/fig_4-a.png",
#       plot = last_plot(), dpi = 300, bg = "white",
#       height = 5, width = 8)
```

#### Selected fragments

```{r, warning=FALSE, message=FALSE, eval=FALSE, include=FALSE, echo=FALSE}

sample_independent_opt(tokenized_df = diderot_corpus %>% 
                         filter(!author %in% c(#"fr_51-55-72-40", 
                                               "fr_on_russia-china", 
                                               "fr_sauvage"
                                               )),
                       n_samples = 2,
                       sample_size = 2400)

dtm <- diy_stylo(
  folder = "corpus_sampled/",
  mfw = 200,
  drop_words = F)

#dim(dtm)

grep("fr", rownames(dtm))

imp_res <- vector(mode = "list")

counter <- 0

for (i in 1:50) {
  
  # create samples for each trial
  sample_independent_opt(
    tokenized_df = diderot_corpus %>% 
                         filter(!author %in% c(#"fr_51-55-72-40", 
                                               "fr_on_russia-china", 
                                               "fr_sauvage"
                                               )),
                       n_samples = 2,
                       sample_size = 2400)
  
  # build doc-term matrix from the samples in the corpus_sampled folder
  data = diy_stylo(mfw = 200, 
                    feature = "word",
                    n_gram = 1)
  
  # test each of the true FV-L1 sets
  for (s in c(13, 14)) {
    
    # run imposters test
    r <- imposters(reference.set = data[-c(13, 14),], # remove test data from the ref
                   test = data[c(s),], # test one of the samples against the others
                   features = 0.5, # test 50% of the features in each trial
                   iterations = 100,
                   distance = "wurzburg"
                   )
    
    # count iterations
    counter <- counter + 1
    
    # store results
    
    imp_res[[counter]] <- tibble(candidate = names(r),
                                 proportion = r)
    
    print(counter)
  }
  
}

saveRDS(imp_res, "imp_res/impr_fr-51-55-72-40.rds")
```

```{r, echo=FALSE}
imp_res <- readRDS("imp_res/impr_fr-51-55-72-40.rds")

imp_res %>%
  bind_rows() %>%  #stack all the optained prop tables into one
  mutate(candidate = str_remove(candidate, "^/")) %>% 
  ggplot(aes(x = reorder(candidate, - proportion),
  y = proportion)) +
  geom_boxplot(fill = "darkcyan", alpha = 0.6) +
  theme_bw() + 
  labs(subtitle = "Proportion of cases where a sample from an author was the closest one\nto the combined fragments 51-55-72-40", x = "") +
  theme(axis.text.x = element_text(angle = 25))
```

# Part IV

Test the corpus without removing suscpicious authors.

## Load corpus

```{r, include=FALSE, echo=FALSE}
corpus <- readRDS("../../data/corpus_tokenized.rds")

unique(corpus$author)

corpus_tokenized <- corpus %>% 
  # combine two Diderot's samples to one
  mutate(author = ifelse(author == "Diderot II", "Diderot", author)) 

glimpse(corpus_tokenized)

# total number of tokens by each author, two samples from Diderot
corpus_tokenized %>% 
  count(author, sort = T) 

rm(corpus)
```

Load problems

```{r, include=FALSE, echo=FALSE}
# editions data

l <- list.files(path = "../../data/test_fragments/",
                pattern = "^ed",
                full.names = T)

ed <- tibble(
  path = l,
  author = str_remove_all(l, "\\.\\./\\.\\./data/test_fragments//|\\.txt"),
  title = "",
  text = sapply(path, read_file)
) %>% 
  mutate(text = str_replace_all(text, "'", " ")) %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  filter(!str_detect(word, "^\\d+$")) %>% 
  filter(!word %in% c("changed", "appeared", "unchanged"))

head(ed)


# pencil / ink data

l <- list.files(path = "../../data/test_fragments/",
                pattern = "^ink|^pencil",
                full.names = T
                )

ink_pencil <- tibble(
  path = l,
  author = str_remove_all(l, "\\.\\./\\.\\./data/test_fragments//|\\.txt"),
  title = "",
  text = sapply(path, read_file)
) %>% 
  mutate(text = str_replace_all(text, "'", " ")) %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  filter(!str_detect(word, "^\\d+$")) %>% 
  filter(!word %in% c("changed", "appeared", "unchanged"))

# likely Diderot's book chunks from FV recombination
l <- list.files(path = "../../data/test_fragments/",
                pattern = "^fr",
                full.names = T
                )

diderot <- tibble(
  path = l,
  author = str_remove_all(l, "\\.\\./\\.\\./data/test_fragments//|\\.txt"),
  title = "",
  text = sapply(path, read_file)
) %>% 
  mutate(text = str_replace_all(text, "'", " ")) %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  filter(!str_detect(word, "^\\d+$")) %>% 
  filter(!word %in% c("changed", "appeared", "unchanged"))

head(diderot)
```

```{r, include=FALSE}
# var needed for diy fn
str_dev_words <- c("changed")
```

## Run GI loop

### Ed corpus

```{r}
ed_corpus <- rbind(corpus_tokenized, ed)
```

```{r}
titles <- unique(ed$author)
titles
```

```{r, warning=FALSE, message=FALSE, eval=FALSE, include=FALSE, echo=FALSE}

for (j in 1:length(titles)) {
  
  t <- titles[j]

  imp_res <- vector(mode = "list")
  
  counter <- 0
  
  for (i in 1:50) {
    
    ed_corpus <- rbind(corpus_tokenized, ed %>% filter(author == t))
    
    # create samples for each trial
    sample_independent_opt(
      tokenized_df = ed_corpus, 
      n_samples = 2, 
      sample_size = 2000) # only 2k words in sample
    
    # build doc-term matrix from the samples in the corpus_sampled folder
    data = diy_stylo(mfw = 200, 
                      feature = "word",
                      n_gram = 1)
    
    # grep("ed", rownames(data))
    
    # test each of the true FV-L1 sets
    for (s in c(13, 14)) {
      
      # run imposters test
      r <- imposters(reference.set = data[-c(13, 14),], # remove test data from the ref
                     test = data[c(s),], # test one of the samples against the others
                     features = 0.5, # test 50% of the features in each trial
                     iterations = 100,
                     distance = "wurzburg"
                     )
      
      # count iterations
      counter <- counter + 1
      
      # store results
      
      imp_res[[counter]] <- tibble(candidate = names(r),
                                   proportion = r)
      
      print(counter)
    }
    
  }
  
  fh <- paste0("imp_res/1_add_res/", t, ".rds")
  
  saveRDS(imp_res, file = fh)
  
}

```

### Pencil & ink & sauvage

```{r}
# select test texts from the corpus
pencil_ink_corpus <- rbind(ink_pencil, corpus_tokenized)

# select test texts from the corpus
diderot_corpus <- rbind(diderot %>% filter(author == "fr_sauvage"), corpus_tokenized)
```

Pencil

```{r, warning=FALSE, message=FALSE, eval=FALSE, include=FALSE, echo=FALSE}

sample_independent_opt(tokenized_df = pencil_ink_corpus %>% 
                         filter(!author %in% c("ink_melanges"#, 
                                              #"pencil_pensees_detachees"
                                               )),
                       n_samples = 2,
                       sample_size = 5000)

dtm <- diy_stylo(
  folder = "corpus_sampled/",
  mfw = 200,
  drop_words = F)

# dim(dtm)

grep("pencil", rownames(dtm))

imp_res <- vector(mode = "list")
r <- NULL
counter <- 0

for (i in 1:50) {
  
  # create samples for each trial
  sample_independent_opt(
    tokenized_df = pencil_ink_corpus %>% 
                         filter(!author %in% c("ink_melanges"#, "pencil_pensees_detachees"
                                               )), 
    n_samples = 2, 
    sample_size = 5000)
  
  # build doc-term matrix from the samples in the corpus_sampled folder
  data = diy_stylo(mfw = 200, 
                    feature = "word",
                    n_gram = 1)
  
  # test each of the true FV-L1 sets
  for (s in c(25, 26)) {
    
    # run imposters test
    r <- imposters(reference.set = data[-c(25, 26),], # remove test data from the ref
                   test = data[c(s),], # test one of the samples against the others
                   features = 0.5, # test 50% of the features in each trial
                   iterations = 100,
                   distance = "wurzburg"
                   )
    
    # count iterations
    counter <- counter + 1
    
    # store results
    
    imp_res[[counter]] <- tibble(candidate = names(r),
                                 proportion = r)
    
    print(counter)
  }
  
}

saveRDS(imp_res, "imp_res/1_add_res/impr_pencil.rds")
```

Plot

```{r}
imp_res <- readRDS("imp_res/1_add_res/impr_pencil.rds")

imp_res %>%
  bind_rows() %>%  #stack all the optained prop tables into one
  mutate(candidate = str_remove(candidate, "^/")) %>% 
  ggplot(aes(x = reorder(candidate, - proportion),
  y = proportion)) +
  geom_boxplot(fill = "darkcyan", alpha = 0.6) +
  theme_bw() + 
  labs(subtitle = "Proportion of cases where a sample from an author was the closest one\nto FV texts from Pensées détachées", x = "") +
  theme(axis.text.x = element_text(angle = 25))
```

Ink

```{r, warning=FALSE, message=FALSE, eval=FALSE, include=FALSE, echo=FALSE}

sample_independent_opt(tokenized_df = pencil_ink_corpus %>% 
                         filter(!author %in% c(#"ink_melanges",
                           #"ink_melanges_not-in-pencil",
                                               "pencil_pensees_detachees"
                                               )),
                       n_samples = 2,
                       sample_size = 5000)

dtm <- diy_stylo(
  folder = "corpus_sampled/",
  mfw = 200,
  drop_words = F)

#dim(dtm)

grep("ink", rownames(dtm))

imp_res <- vector(mode = "list")
r <- NULL
counter <- 0

for (i in 1:50) {
  
  # create samples for each trial
  sample_independent_opt(
    tokenized_df = pencil_ink_corpus %>% 
                         filter(!author %in% c(# "ink_melanges"
                           #"ink_melanges_not-in-pencil",  
                           "pencil_pensees_detachees"
                                               )), 
    n_samples = 2, 
    sample_size = 5000)
  
  # build doc-term matrix from the samples in the corpus_sampled folder
  data = diy_stylo(mfw = 200, 
                    feature = "word",
                    n_gram = 1)
  
  # test each of the true FV-L1 sets
  for (s in c(15, 16)) {
    
    # run imposters test
    r <- imposters(reference.set = data[-c(15, 16),], # remove test data from the ref
                   test = data[c(s),], # test one of the samples against the others
                   features = 0.5, # test 50% of the features in each trial
                   iterations = 100,
                   distance = "wurzburg"
                   )
    
    # count iterations
    counter <- counter + 1
    
    # store results
    
    imp_res[[counter]] <- tibble(candidate = names(r),
                                 proportion = r)
    
    print(counter)
  }
  
}

saveRDS(imp_res, "imp_res/1_add_res/impr_ink.rds")

```

```{r, echo=FALSE}
imp_res <- readRDS("imp_res/1_add_res/impr_ink.rds")

imp_res %>%
  bind_rows() %>%  #stack all the optained prop tables into one
  mutate(candidate = str_remove(candidate, "^/")) %>% 
  ggplot(aes(x = reorder(candidate, - proportion),
  y = proportion)) +
  geom_boxplot(fill = "darkcyan", alpha = 0.6) +
  theme_bw() + 
  labs(subtitle = "Proportion of cases where a sample from an author was the closest one\nto FV texts from Mélanges (ink)", x = "") +
  theme(axis.text.x = element_text(angle = 25))
```

Sauvage

```{r, warning=FALSE, message=FALSE, eval=FALSE, include=FALSE, echo=FALSE}

sample_independent_opt(tokenized_df = diderot_corpus %>% 
                         filter(!author %in% c("fr_51-55-72-40", 
                                               "fr_on_russia-china"#, 
                                               #"fr_sauvage"
                                               )),
                       n_samples = 2,
                       sample_size = 4500)

dtm <- diy_stylo(
  folder = "corpus_sampled/",
  mfw = 200,
  drop_words = F)

#dim(dtm)

grep("fr_", rownames(dtm))

imp_res <- vector(mode = "list")

counter <- 0

for (i in 1:50) {
  
  # create samples for each trial
  sample_independent_opt(
    tokenized_df = diderot_corpus %>% 
                         filter(!author %in% c("fr_51-55-72-40", 
                                               "fr_on_russia-china"#, 
                                               #"fr_sauvage"
                                               )), 
    n_samples = 2, 
    sample_size = 4500)
  
  # build doc-term matrix from the samples in the corpus_sampled folder
  data = diy_stylo(mfw = 200, 
                    feature = "word",
                    n_gram = 1)
  
  # test each of the true FV-L1 sets
  for (s in c(13, 14)) {
    
    # run imposters test
    r <- imposters(reference.set = data[-c(13, 14),], # remove test data from the ref
                   test = data[c(s),], # test one of the samples against the others
                   features = 0.5, # test 50% of the features in each trial
                   iterations = 100,
                   distance = "wurzburg"
                   )
    
    # count iterations
    counter <- counter + 1
    
    # store results
    
    imp_res[[counter]] <- tibble(candidate = names(r),
                                 proportion = r)
    
    print(counter)
  }
  
}

saveRDS(imp_res, "imp_res/1_add_res/impr_sauvage.rds")
```

```{r, echo=FALSE}
imp_res <- readRDS("imp_res/1_add_res/impr_sauvage.rds")

imp_res %>%
  bind_rows() %>%  #stack all the optained prop tables into one
  mutate(candidate = str_remove(candidate, "^/")) %>% 
  ggplot(aes(x = reorder(candidate, - proportion),
  y = proportion)) +
  geom_boxplot(fill = "darkcyan", alpha = 0.6) +
  theme_bw() + 
  labs(subtitle = "Proportion of cases where a sample from an author was the closest one\nto the fragment 'Les avantages de la vie sauvage'", x = "") +
  theme(axis.text.x = element_text(angle = 25))



imp_res %>%
  bind_rows() %>%  #stack all the optained prop tables into one 
  mutate(candidate = str_remove(candidate, "^/")) %>% 
  filter(candidate %in% c("Diderot", "Pechmeja", "Morellet", "Meister", "Rivière", "Condorcet", "dHolbach", "Saint-Lambert",  "Baudeau")) %>% 
  mutate(gr = ifelse(candidate == "Diderot", "d", "no")) %>% 
  ggplot(aes(x = reorder(candidate, proportion),
  y = proportion)) + 
  geom_boxplot(aes(fill = gr)) + 
  #geom_boxplot(fill = "darkcyan", alpha = 0.6) +
  theme_bw() + 
  coord_flip() + 
  scale_fill_manual(values = met.brewer("Kandinsky")[2:4]) + 
  labs(subtitle = "Proportion of cases where a sample from an author was the closest one\nto the fragment 'Les avantages de la vie sauvage'", x = "Candidates (selected)", y = "Proportion") +
  theme(#axis.text.x = element_text(angle = 25)
        axis.text = element_text(size = 12),
        legend.position = "None"
        )

# ggsave("../../hdi_diderot/scr/plots_paper/fig_4-a.png",
#       plot = last_plot(), dpi = 300, bg = "white",
#       height = 5, width = 8)
```
